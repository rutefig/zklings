format_version = 1

welcome_message = """
-------------------------------------
     _    _ _                 
    | |  | (_)                
 ___| | _| |_ _ __   __ _ ___ 
|_  / |/ / | | '_ \\ / _` / __|
 / /|   <| | | | | | (_| \\__ \\
/___|_|\\_\\_|_|_| |_|\\__, |___/
                     __/ |    
                    |___/     
-------------------------------------

Welcome to zklings! This is your first step into the world of Zero-Knowledge Proofs!

Here's what you need to know about how zklings works:

1. zklings is based on exercises. Each exercise will introduce you to a concept
   related to Zero-Knowledge Proofs or the underlying mathematics. Your job is to
   solve these exercises, which may involve fixing errors, completing code, or
   answering questions.

2. Make sure your editor is open in the `zklings/` directory. zklings will show you
   the path of the current exercise below the progress bar. Open this file, solve
   the exercise, and save your changes. zklings will automatically detect the change
   and check your solution.

3. If you're stuck, type `h` to see a hint for the current exercise.

4. The exercises start with fundamental mathematical concepts and gradually progress
   to more complex Zero-Knowledge Proof topics. Don't worry if you find some exercises
   challenging - that's part of the learning process!

5. If something isn't clear or you think you've found an issue, feel free to open an
   issue on our GitHub repository. We value your feedback and contributions!

Are you ready to dive into the fascinating world of Zero-Knowledge Proofs? Let's get started!"""

final_message = """Congratulations on completing zklings!

We hope this journey has given you a solid foundation in Zero-Knowledge Proofs
and their underlying mathematical concepts. Remember, this is just the beginning
of your ZKP adventure!

Here are some suggestions for your next steps:
1. Explore real-world applications of Zero-Knowledge Proofs.
2. Dive deeper into specific ZKP protocols like zk-SNARKs or zk-STARKs.
3. Try implementing a simple ZKP system in your preferred programming language.
4. Join ZKP communities to stay updated with the latest developments.

If you noticed any issues or have ideas for improving zklings, please don't
hesitate to contribute on our GitHub repository. Your input helps make zklings
better for future learners!

Thank you for using zklings, and best of luck in your Zero-Knowledge journey!"""

# INTRO

[[exercises]]
name = "intro1"
ext = "rs"
dir = "intro"
test = false
skip_check_unsolved = true
hint = """
Enter `n` to move on to the next exercise.
You might need to press ENTER after typing `n`."""

# MATH

[[exercises]]
name = "01_basic_modulo"
ext = "md"
dir = "math"
test = false
hint = """
The modulo operation gives the remainder after division.
"""

[[exercises]]
name = "02_negative_modulo"
ext = "md"
dir = "math"
test = false
hint = """
Calculate the negative of a number in Modular Arithmetic.
"""

[[exercises]]
name = "03_modular_addition"
ext = "md"
dir = "math"
test = false
hint = """
Calculate the sum of two numbers in Modular Arithmetic.
"""

[[exercises]]
name = "04_modular_subtraction"
ext = "md"
dir = "math"
test = false
hint = """
Calculate the difference of two numbers in Modular Arithmetic.
"""

[[exercises]]
name = "05_negative_subtraction"
ext = "md"
dir = "math"
test = false
hint = """
Calculate the negative difference of two numbers in Modular Arithmetic.
"""

# CIRCOM

[[exercises]]
name = "01_signals"
ext = "circom"
dir = "circom/01_signals"
test = false
hint = """
The circuit should have a public output"""

[[exercises]]
name = "02_signals"
ext = "circom"
dir = "circom/01_signals"
test = false
hint = """
Check which signal is being used on the constraints and is not defined"""

[[exercises]]
name = "01_constraints"
ext = "circom"
dir = "circom/02_constraints"
test = false
hint = """
You need to have every constraint with just one multiplication. You can add intermediate signals as needed.
"""

[[exercises]]
name = "01_templates"
ext = "circom"
dir = "circom/03_templates"
test = false
hint = """
Instantiate the template A with the component keyword and pass the necessary parameters
"""

[[exercises]]
name = "dlp1"
ext = "rs"
dir = "zk-protocols-basics/01_discrete_log_problem"
test = true
hint = """
Implement the basic discrete log function which runs a check on individual element within the range and checks if the exponenetiation matches the result.
"""

[[exercises]]
name = "dlp2"
ext = "rs"
dir = "zk-protocols-basics/01_discrete_log_problem"
test = true
hint = """
Implement the discrete log function returning an array with at least five solutions for the same modulo result.
"""

[[exercises]]
name = "01_schnorr_protocol"
ext = "rs"
dir = "zk-protocols-basics/02_schnorr_protocol"
test = true
hint = """
Implement the prover_commitment, prover_response, and verifier_check function as specified in the Schnorr Protocol.
"""

[[exercises]]
name = "01_pedersen_commitment"
ext = "rs"
dir = "zk-protocols-basics/03_pedersen_commitment"
test = true
hint = """
Implement the Pedersen protocol step-by-step both as a verifier and as a Prover as specified in the Pedersen Commitment Scheme.
"""